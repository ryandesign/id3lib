1999-11-19  Scott Thomas Haug  <sth2@cs.wustl.edu>

	* tag_render.cpp
 	(RenderV1ToHandle): Added.  Adds or overwrites an id3v1 tag to a file
	handle.  Needs testing.
	(RenderV2ToHandle): Renamed from RenderToHandle.

	* tag_parse_v1.cpp 
	(ID3_RemoveTrailingSpaces): Minor code cleanup.
	(ParseID3v1): Massive recoding of method to make use of new functions
	defined in misc_support.  Simplifies flow of method.

	* tag_find.cpp (Find): Add const qualifier.

	* tag_file.cpp 
	(Update): Changed parameter to be a flag which indicates which type of
	tag to update, either V1_TAG, V2_TAG, or BOTH_TAGS.  Updated method to
	act appropriately based on the parameter passed in.
	(Strip): Changed parameter to be a flag which indicates which type of
	tag to update, either V1_TAG, V2_TAG, or BOTH_TAGS.  Updated method to
	act appropriately based on the parameter passed in.

	* tag.h: Added new constants: STR_V1_COMMENT_DESC (to be added to
 	the description of comments converted from id3v1 tags); V1_TAG,
 	V2_TAG, and BOTH_TAGS (used for methods Strip and Update to
 	determine which tag to act on); and LEN_V1, LEN_V1_ID,
 	LEN_V1_TITLE, LEN_V1_ARTIST, LEN_V1_ALBUM, LEN_V1_YEAR,
 	LEN_V1_COMMENT, LEN_V1_GENRE (the lengths of the id3v1 tag and its
 	fields). Generalized ID3V1_Tag struct using newly defined
 	constants.  Added 1 to each char array size for null terminator. 
	Added const qualifier to appropriate methods and parameters.  Added
	declaration of RenderV1ToHandle method.  Renamed "RenderToHandle" to
	"RenderV2ToHandle".

	* misc_support.h: Added the function declarations for ID3_GetString,
	ID3_GetArtist, ID3_GetAlbum, ID3_GetTitle, ID3_GetYear, ID3_AddYear,
	ID3_GetComment, ID3_AddComment, ID3_GetTrack, ID3_GetTrackNum,
 	ID3_AddTrack, ID3_GetGenre, ID3_GetGenreNum, and ID3_GetLyrics.

	* misc_support.cpp 
	(ID3_ASCIItoUnicode): Updated interface to make parameters const.  
	Replaced content of the code with call to mbstowcs, a function defined
	in wchar.h for converting from a regular string to a wchar string.  The
	original code might be reinstated if another type is used to store 
	unicode characters.
	(ID3_UnicodeToASCII): Updated interface to make parameters const.  
	Replaced content of the code with call to wcstombs, a function defined
	in wchar.h for converting from a wchar string to a regular string.  The
	original code might be reinstated if another type is used to store 
	unicode characters.
	(ID3_GetString): Added.  Returns a dynamically-allocated copy of the
	string contained in the frame/field parameters.
	(ID3_GetArtist): Added.  Returns the artist as a string.  Will return
	the LEADARTIST, the BAND, the CONDUCTOR, or the COMPOSER, whichever is
	found first in that order.
	(ID3_GetAlbum): Added.  Returns the album as a string.
	(ID3_GetTitle): Added.  Returns the song title as a string.
	(ID3_GetYear): Added.  Returns the year as a string.
	(ID3_AddYear): Added.  Adds the year as a string to the frame.
	(ID3_GetComment): Added.  Returns the first comment found as a string.
	(ID3_AddComment): Added. Adds the comment as a string with the
 	description stored in STR_V1_COMMENT_DESC, currently "ID3v1_Comment".
	Won't add if a tag with that or no description already exists.
	(ID3_GetTrack): Added.  Returns the track number as a string.
	(ID3_GetTrackNum): Added.  Returns the track number as an unsigned
	integer.
	(ID3_AddTrack): Added.  Adds the track number and track total as a
	string in the form "N/T", where N is the track number and T is the
 	total.  If no total is indicated, then only the track number is added.
	(ID3_GetGenre): Added.  Returns the genre as a string.
	(ID3_GetGenreNum): Added. Returns the genre as a number.
	(ID3_AddGenre): Added.  Adds the genre number as a string in the form
	"(G)", where G is the genre number.
	(ID3_GetLyrics): Added.  Gets the unsynced lyrics as a string.

	* field_string_unicode.cpp 
	(operator=): Updated interface to make parameters const.
	(Set): Updated interface to make parameters const.  Bug fix for fixed
	length strings.  Minor variable renaming.
	(Add): Updated interface to make parameters const.
	(Get): Updated interface to make parameters const.  Fixed bug which 
	would add a null character to the string regardless of the length of
	string requested.  Now only adds a null when the actual length of the
	string is less than the maxium number of characters requested.

	* field_string_ascii.cpp 
	(operator=): Updated interface to make parameters const.
	(Set): Updated interface to make parameters const.  Bug fix for fixed
	length strings.
	(Get): Removed check for nonempty strings so empty strings would be
	set correctly.  Minor code cleanup.
	(Add): Updated interface to make parameters const.  Made variable name
	more descriptive.

	* field_integer.cpp 
	(ParseInteger): Updated interface to make parameters const.

	* field_binary.cpp 
	(Set): Updated interface to make parameters const.
	(FromFile): Updated interface to make parameters const.
	(ToFile): Updated interface to make parameters const.
	(ParseBinary): Updated interface to make parameters const.

	* field.h (class ID3_Field): Updated method interfaces to make
	appropriate parameters const.

	* field.cpp
 	(BinSize): Added check for an ascii string when called by Size, since
 	we store every string internally as unicode.
	(Parse): Updated interface to make parameters const.
	(ID3_FindFrameDef): Updated interface to make parameter const.
	(ID3_FindFrameID): Updated interface to make parameter const.

	* dll_wrapper.cpp (ID3Tag_Strip): Updated for interface change to
 	Tag::Strip.  Now accepts tag flags rather than a v1 boolean.

1999-11-16  Scott Thomas Haug  <sth2@cs.wustl.edu>

	* tag_parse.cpp
 	(ProcessBinaries): Added try/catch block to catch any exceptions so
	that the parser can carry on parsing the rest of the frames if any
	particular frame is poorly encoded.  Need to add some sort of
 	mechanism to determine how many frames exist, how many have been 
	parsed correctly and how many have been parsed incorrectly.

	* field_string_unicode.cpp
	(ParseUnicodeString): Put in sanity check for indices so that
 	memcpy doesn't go out of bounds. Made unicode code more specific
 	to the type of data storing unicode characters.  This fix doesn't
 	work if the type is different than two bytes in size.  Need to fix
 	so that the type is guaranteed to be two bytes.
	(RenderUnicodeString): Made unicode code more specific to the type
 	of data storing unicode characters.
	
	* field_string_ascii.cpp (ParseASCIIString): Added sanity check
 	for indices so we don't call memcpy with out-of-bounds indices.

	* field.cpp (Render): Minor reformatting.

	* error.h (ID3_Err): Added new ID3_Err: ID3E_BadData.

	* error.cpp (ID3_ErrorDescs): Added text entry for ID3E_BadData.

1999-11-15  Scott Thomas Haug  <sth2@cs.wustl.edu>

	* Makefile.am: Upped the version info to 3.0.6.

	* tag_render.cpp:
	Added include for config.h.  Minor code cleanup.  Removed
 	assignments from if checks; first makes assignment, then checks
 	for appropriate value.  Made private member variable names more
	descriptive.  Now uses mktemp rather than mkstemp in
	GenerateTempName so that a file descriptor isn't created along
	with the temporary name.

	* tag_find.cpp:
	Added include for config.h.  Removed assignments from if checks;
 	first makes assignment, then checks for appropriate value.  Made
 	private member variable names more descriptive.  Major code
	cleanup: use of for loops instead of while's to ease code
	readability, more compact looping structures to reduce possibility 
	in coding or human parsing errors,

	* tag_file.cpp:
	Added include for config.h.  Minor code cleanup.  Removed
 	assignments from if checks; first makes assignment, then checks
 	for appropriate value.  Made private member variable names more
	descriptive.  OpenLinkedFile now checks to see if the file is
	writable or not, and still opens the file, even if it can't be
	written to.  This needs to be more robust (i.e., we shouldn't be
	creating temp files if the file isn't writable).  Made use of
	bFileWrtiable variable, which was introduced.
	
	* tag.h:
	Made variable names more descriptive.  Added const qualifier to
	appropriate methods.
	
	* int28.cpp: 
	Added include for config.h. Changed some ints to luints to avoid
	compiler warnings.

	* header.h, header_frame.h:
	Made variable names more descriptive.
	
	* header.cpp:
	Added include for config.h.  Minor code cleanup.  Made private
	member variable names more descriptive.  Fixed bug I introduced in
	logic of checking version/revision numbers in
	ID3_LookupHeaderInfo, and cleaned up the code in the process.

	* frame.h: 
	Made ID3_Tag a friend of ID3_Frame to allow access to the private
	members in ID3_Frame.  Made variable names more descriptive.
	Added const qualifier to appropriate methods.

	* field_binary.cpp, field_integer.cpp, field_string_ascii.cpp, field_string_unicode.cpp, frame.cpp, frame_render.cpp, header_frame.cpp, misc_support.cpp, tag.cpp, tag_parse.cpp, tag_parse_lyrics3.cpp, tag_parse_v1.cpp, tag_sync.cpp:
	Added include for config.h.  Minor code cleanup.  Removed
 	assignments from if checks; first makes assignment, then checks
 	for appropriate value.  Made private member variable names more
	descriptive.

	* field.h:
	Made ID3_Frame and ID3_Tag friends of the ID3_Field class to allow
 	access to the private members in ID3_Field.  Made ID3FF field
 	flags const luints, rather than #define's.  Made member variable
	names of classes and structs more descriptive.  
	
	* field.cpp: 
	Added include for config.h.  Replaced LU_NULL with ID3FF_NONE for
 	more consistency in flag naming.  Blocked out the ID3FD_Volume
 	array definition since it is currently unused.  Reformatted
 	ID3_FrameDefs for easier reading (although most lines are more
 	than 80 chars long now).  Made private member variable names more
 	descriptive.  Fixed bug in SetVersion (was checking "rev != rev").
  	Adjusted logic somewhat in BinSize to ease code reading.  Fixed
 	bug in BinSize that was causing incorrect parsing of correct
 	frames, such as COMM (previously assumed a wchar_t is 2 bytes,
	which might not be true on some platforms).

	* error.h:
	Made constructor public.  Added new interface to error reporting
 	to allow for more descriptive error messages (this should still be
 	worked on).  Made private member variable names more descriptive.
	Added const qualifier to appropriate methods.

	* error.cpp: 
	Added include for config.h.  Added new interface to error
 	reporting to allow for more descriptive error messages (this
 	should still be worked on).  Made private member variable names
	more descriptive. 

	* dll_wrapper.cpp, frame_parse.cpp, header_tag.cpp:
	Added include for config.h.  Made variable names more descriptive.

	* Makefile.am, Makefile.in: Updated versioning info and CXXFLAGS

