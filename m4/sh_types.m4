dnl Autoconf support for size-specific types
dnl Copyright (C) 1999 Scott Thomas Haug <sth2@cs.wustl.edu>
dnl  
dnl This program is free software; you can redistribute it and/or modify
dnl it under the terms of the GNU General Public License as published by
dnl the Free Software Foundation; either version 2 of the License, or
dnl (at your option) any later version.
dnl 
dnl This program is distributed in the hope that it will be useful,
dnl but WITHOUT ANY WARRANTY; without even the implied warranty of
dnl MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
dnl GNU General Public License for more details.
dnl 
dnl You should have received a copy of the GNU General Public License
dnl along with this program; if not, write to the Free Software 
dnl Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
dnl 
dnl As a special exception to the GNU General Public License, if you 
dnl distribute this file as part of a program that contains a configuration 
dnl script generated by Autoconf, you may include it under the same 
dnl distribution terms that you use for the rest of that program.

# -----------------------------------------------------------------
# This macro should be called to define size-specific types
# If this macro completes, it will define types for signed and unsigned
# 8, 16, and 32 bit numbers, based on the macros defined in limits.h.
# The names of the types defined are (u)?int(8,16,32).  The code was
# taken partially from the freeamp (http://www.freeamp.org) codebase.
# ------------------------------------------------------------------

dnl ACCONFIG TEMPLATE
dnl #undef SIZE_SPECIFIC_TYPES
dnl END ACCONFIG

AC_DEFUN(SH_SIZE_SPECIFIC_TYPES,[
 AC_DEFINE(SIZE_SPECIFIC_TYPES)
])

dnl ACCONFIG BOTTOM
dnl 
dnl #ifdef SIZE_SPECIFIC_TYPES
dnl 
dnl /* 
dnl  * This file defines size-specific typedefs based on the macros defined in
dnl  * limits.h
dnl  */
dnl 
dnl #include <limits.h>
dnl 
dnl /* define our datatypes */
dnl 
dnl /* Define 8-bit types */
dnl #if UCHAR_MAX == 0xff
dnl 
dnl typedef unsigned char   uint8;
dnl typedef signed char      int8;
dnl 
dnl #else
dnl #error This machine has no 8-bit type
dnl #endif /* UCHAR_MAX == 0xff */
dnl 
dnl /* Define 16-bit types */
dnl #if UINT_MAX == 0xffff
dnl 
dnl typedef unsigned int    uint16;
dnl typedef int              int16;
dnl 
dnl #elif USHRT_MAX == 0xffff
dnl 
dnl typedef unsigned short  uint16;
dnl typedef short            int16;
dnl 
dnl #else
dnl #error This machine has no 16-bit type
dnl #endif /* UINT_MAX == 0xffff */
dnl 
dnl /* Define 32-bit types */
dnl #if UINT_MAX == 0xfffffffful
dnl 
dnl typedef unsigned int    uint32;
dnl typedef int              int32;
dnl 
dnl #elif ULONG_MAX == 0xfffffffful
dnl 
dnl typedef unsigned long   uint32;
dnl typedef long             int32;
dnl 
dnl #elif USHRT_MAX == 0xfffffffful
dnl 
dnl typedef unsigned short  uint32;
dnl typedef short            int32;
dnl 
dnl #else
dnl #error This machine has no 32-bit type
dnl #endif /* UINT_MAX == 0xfffffffful */
dnl 
dnl #endif /* SIZE_SPECIFIC_TYPES */
dnl 
dnl END ACCONFIG

